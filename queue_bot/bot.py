import telebot
from telebot import types
import psycopg2
from configparser import ConfigParser
import datetime
import data_storage as db
import re

API_TOKEN = '6042118462:AAFSsuIPOcaRocGuT9ImTnuaR8yXgy-_7e0'
bot = telebot.TeleBot (API_TOKEN)

def config(filename='../configs/database.ini', section='postgresql'):
    parser = ConfigParser()
    parser.read(filename)
    db = {}
    if parser.has_section(section):
        params = parser.items(section)
        for param in params:
            db[param[0]] = param[1]
    else:
        raise Exception('Section {0} not found in the {1} file'.format(section, filename))

    return db


def connectDB():
    conn = None
    try:
        params = config()
        print('Connecting to the PostgreSQL database...')
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    return conn, cur
    

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç, –∑–∞–ø–∏—à–∏ –º–µ–Ω—è –≤ –æ—á–µ—Ä–µ–¥—å")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã - –ü—Ä–∏–≤–µ—Ç, –Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–¥–∞—á—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç! –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)


@bot.message_handler(commands=['help'])
def start(message):
    bot.send_message(message.from_user.id, "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–¥–∞—á—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç!\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ /start")


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü—Ä–∏–≤–µ—Ç, –∑–∞–ø–∏—à–∏ –º–µ–Ω—è –≤ –æ—á–µ—Ä–µ–¥—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '‚ùó–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞', reply_markup=markup)
    
    elif message.text == '–í–æ–π—Ç–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫':
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:')
        conn, cur = connectDB()
        cur.execute('SELECT * from Users')
        usrs = cur.fetchall()
        for user in usrs:
            db.user_data.add(user[1])
        cur.execute('SELECT SubjectID, Description from Subject')
        subjects = cur.fetchall()
        for s in subjects:
            db.subj_data[s[1]] = s[0] 
        cur.close()
        conn.close()
    
    elif message.text in db.user_data and not db.auth:
        db.subj_choice = False
        db.login = message.text
        conn, cur = connectDB()
        cur.execute('SELECT StudentID from Student where user_id = (SELECT UserID from Users where Login=%s)', (db.login,))
        db.current_student_id = cur.fetchone()[0]
        # print('current user-student:',db.login, db.current_student_id)
        # print(message.text)
        # print(message.text in db.user_data)
        db.auth = True
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for s in db.subj_data.keys():
            # print(s)
            btn1 = types.KeyboardButton(s)
            markup.add(btn1)
        bot.send_message(message.from_user.id, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Å–¥–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É', reply_markup=markup)    
    
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for s in db.subj_data.keys():
            # print(s)
            btn1 = types.KeyboardButton(s)
            markup.add(btn1)
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Å–¥–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É', reply_markup=markup)
    elif message.text not in db.user_data and not db.auth:
        # print(message.text in db.user_data)
        # print(db.user_data)
        bot.send_message(message.from_user.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ.\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.')
         
    elif message.text in db.subj_data.keys() and not db.subj_choice:
        db.subj_choice = True
        db.current_subject = db.Subject(db.subj_data[message.text], message.text)
        # print(db.current_subject.name, db.current_subject.id)
        conn, cur = connectDB()
        cur.execute('SELECT * from Queue where subject_id = %s and StartDate >= %s',
                     (db.current_subject.id, datetime.datetime.now().date()))
        active_queues = cur.fetchall()
        # print(len(active_queues))
        if len(active_queues) == 0:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
            markup.add(btn1)
            bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å?', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for q in active_queues:
                # print(q)
                date = q[1].date()
                time = q[1].time()
                name = '–û—á–µ—Ä–µ–¥—å {day}-{month}-{year} {hour}:{min}'.format(day=date.day, month=date.month, 
                                                                          year=date.year, hour=time.hour, min=time.minute)
                btn1 = types.KeyboardButton(name)
                markup.add(btn1)
            markup.add(types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'))
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π', reply_markup=markup)
        cur.close()
        conn.close()
    
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        conn, cur = connectDB()
        queue_date = datetime.datetime.now()
        date = queue_date.date()
        time = queue_date.time()
        text = '–û—á–µ—Ä–µ–¥—å {day}-{month}-{year} {hour}:{min}'.format(day=date.day,
                             month=date.month, year=date.year, hour=time.hour, min=time.minute)
        db.queue_date[text] = queue_date
        print(text, db.queue_date[text])
        cur.execute("INSERT INTO Queue(QueueID, StartDate, subject_id) VALUES (gen_random_uuid(), %s, %s)", 
                    (queue_date, db.current_subject.id))
        cur.execute('select QueueID from Queue where StartDate = %s', (queue_date,))
        cqid = cur.fetchone()[0]
        cur.close()
        conn.commit()
        conn.close()
        db.current_queue.id = cqid
        db.current_queue.date = queue_date
        db.current_queue.subject_id = db.current_subject.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
        btn2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—á–µ—Ä–µ–¥–µ–π')
        markup.add(btn1, btn2) 
        bot.send_message(message.from_user.id, text + ' —Å–æ–∑–¥–∞–Ω–∞', reply_markup=markup)
    
    elif re.fullmatch("–û—á–µ—Ä–µ–¥—å \d{1,2}\-\d{1,2}\-\d{4} \d{1,2}\:\d{1,2}", message.text):
        print(db.queue_date)
        norm_date = db.queue_date[message.text]
        conn, cur = connectDB()
        cur.execute('SELECT * from Queue where StartDate = %s', (norm_date,))
        cur_queue = cur.fetchone()
        db.current_queue.id = cur_queue[0]
        db.current_queue.date = cur_queue[1]
        db.current_queue.subject_id = db.current_subject.id
        cur.close()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
        btn2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—á–µ—Ä–µ–¥–µ–π')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"', reply_markup=markup)
    
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—á–µ—Ä–µ–¥–µ–π':
        conn, cur = connectDB() 
        cur.execute('SELECT * from Queue where subject_id = %s and StartDate >= %s',
                     (db.current_subject.id, datetime.datetime.now().date()))
        active_queues = cur.fetchall()
        if len(active_queues) == 0:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
            markup.add(btn1)
            bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å?', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for q in active_queues:
                print(q)
                date = q[1].date()
                time = q[1].time()
                name = '–û—á–µ—Ä–µ–¥—å {day}-{month}-{year} {hour}:{min}'.format(day=date.day, month=date.month, 
                                                                          year=date.year, hour=time.hour, min=time.minute)
                btn1 = types.KeyboardButton(name)
                markup.add(btn1)
            markup.add(types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'))
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π', reply_markup=markup)
        cur.close()
        conn.close()
    
    elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å')
        btn2 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å"\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ - "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å"', reply_markup=markup)
    
    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å':
        conn, cur = connectDB()
        cur.execute('SELECT NumInQueue, student_id from StudentInQueue where queue_id = %s order by NumInQueue', (db.current_queue.id,))
        cur_queue = cur.fetchall()
        # cur.execute('select * from StudentInQueue where queue_id = %s', (db.current_queue.id,))
        # cur_queue = cur.fetchall()
        print(cur_queue)
        print(db.current_queue.id)
        if len(cur_queue) == 0:
            queue_list = '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –ø–µ—Ä–≤—ã–º!'
        else:    
            queue_list = ''
            for s in cur_queue:
                cur.execute('SELECT Surname, StudentName, group_id from Student where StudentID = %s', (s[1],))
                student = cur.fetchone()
                cur.execute('SELECT GroupName from StudentGroup where GroupID = %s', (student[2],))
                g = cur.fetchone()
                stud = '{surname} {name} {group}'.format(surname=student[0], name=student[1], group=g[0])
                queue_list += '{num}. {name}\n'.format(num=s[0], name=stud)
        cur.close()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å')
        btn2 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å')
        btn3 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—á–µ—Ä–µ–¥–µ–π')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, queue_list, reply_markup=markup)
    
    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å':
        conn, cur = connectDB()
        cur.execute('SELECT 1 FROM StudentInQueue WHERE student_id = %s and queue_id = %s', 
                    (db.current_student_id, db.current_queue.id,))
        res = cur.fetchall()
        
        if len(res) == 1:
            cur.close()
            conn.close()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å')
            btn2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            btn3 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—á–µ—Ä–µ–¥–µ–π')
            markup.add(btn1, btn2, btn3)
            date = db.current_queue.date.date()
            time = db.current_queue.date.time()
            text = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑!\n–í—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ {day}-{month}-{year} {hour}:{min}'.format(
                day=date.day, month=date.month, year=date.year, hour=time.hour, min=time.minute)
            bot.send_message(message.from_user.id, text, reply_markup=markup)
        else:
            cur.execute('INSERT INTO StudentInQueue(student_id, queue_id, NumInQueue) VALUES (%s, %s, (SELECT COUNT(*) + 1 from StudentInQueue where queue_id = %s))', 
                    (db.current_student_id, db.current_queue.id, db.current_queue.id))
            cur.close()
            conn.commit()
            conn.close()
            # conn, cur = connectDB()
            # cur.execute('select * from StudentInQueue where queue_id = %s', (db.current_queue.id,))
            # al = cur.fetchall()
            # print(al)
            # print(db.current_queue.id)
            # cur.close()
            # conn.close()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å')
            btn2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(btn1, btn2)
            date = db.current_queue.date.date()
            time = db.current_queue.date.time()
            text = '–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å {day}-{month}-{year} {hour}:{min}'.format(
                day=date.day, month=date.month, year=date.year, hour=time.hour, min=time.minute)
            
            bot.send_message(message.from_user.id, text, reply_markup=markup)
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å':
        conn, cur = connectDB()
        cur.execute('drop view StudentQueue if exists')
        cur.execute('create view StudentQueue AS SELECT student_id, queue_id, NumInQueue FROM StudentInQueue')
        cur.execute('delete from StudentQueue where student_id =%s)', (db.current_student_id,))
        cur.close()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å')
        btn2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {date}'.format(date=db.current_queue.date), reply_markup=markup)

        


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)

